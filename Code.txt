Filepath: githubCode\client\tailwind.config.js:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [ "./src/**/*.{js,jsx,ts,tsx}",],
  theme: {
    screens: {
      '2xl': {'max': '1535px'},
      // => @media (max-width: 1535px) { ... }
    
      'xl': {'max': '1380px'},
      // => @media (max-width: 1279px) { ... }

      'lg': {'max': '1103px'},
      // => @media (max-width: 1103px) { ... }
      'xllg': {'max': '1146px'},

      'xlg': {'max': '1243px'},

      'mlg': {'max': '1025px'},
      // => @media (max-width: 1103px) { ... }


      'xmd': {'max': '900px'},

      'md': {'max': '767px'},
      // => @media (max-width: 767px) { ... }
      'nm': {'max': '680px'},

      'xnm':{'max':'860px'},

      'sm': {'max': '580px'},

      // => @media (max-width: 639px) { ... }
      'xsml': {'max': '556px'},

      'xsm': {'max': '380px'},
      'xssm': {'max': '340'},
    },
    extend: {},
  },
  plugins: [],
}



Filepath: githubCode\server\db.js:

const mongoose=require('mongoose')


const userSchema = new mongoose.Schema({
    email: String,
    otpverified:String ,
    otp: String,
    key: String

})
 
const userModel = mongoose.model("userCollection", userSchema);

module.exports=userModel;


Filepath: githubCode\server\index.js:

const express = require("express");
const { faker } = require("@faker-js/faker");
const app = express();
const port = 5000;
const router = express.Router();
const route = require("./routes/routes");
const cors = require("cors");
const { keyverification } = require("./middleware/keyverification");
require("dotenv").config();
app.use(cors());
const mongoose = require("mongoose");

// Middleware to parse JSON bodies
app.use(express.json());

mongoose
  .connect(
    `mongodb+srv://Ayush:${process.env.MONGO_PASS}@cluster0.fohsg.mongodb.net/${process.env.DB_NAME}`,
    { useNewUrlParser: true }
  )
  .then(() => console.log("db connected"))
  .catch((err) => console.log(err));

app.use("/api/route", route);




app.get("/",(req,res)=>{
  res.send({"message":"this server is live"})
})

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});


Filepath: githubCode\client\src\App.js:


import "react-toastify/dist/ReactToastify.css";
import "./App.css";
import Home from "./Components/Home";
import { Route, Routes } from "react-router-dom";
import "react-toastify/dist/ReactToastify.css";
import Login from "./Components/Login";
import Documentation from "./Documentation";

function App() {




  return (
    <Routes>
      <Route path="/" element={<>
        <Home /></>}/>
        <Route path="/docs" element={<>
        <Documentation /></>}/>
      <Route path='/login' element={<Login/>}/>    
    </Routes>
  );
}

export default App;


Filepath: githubCode\client\src\index.js:

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import {BrowserRouter} from "react-router-dom";


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))



Filepath: githubCode\client\src\utils\imagesComponentList.js:

const imageList = [
  {imageName: "devfest.jpg"},
  {imageName: "solana.jpg"},
  {imageName: "winterlude.jpg"},
  {imageName: "wemakedev.png"},
  {imageName: "polygon.png"},
  {imageName: "uhack.jpg"},
  {imageName: "azure.jpg"},
  {imageName: "image1.jpg"},
  {imageName: "image2.jpg"},
  {imageName: "github1.jpg"}
]

export default imageList;


Filepath: githubCode\client\src\utils\MeetupImageList.js:

const meetUpList = [
    {
        src: "https://secure.meetupstatic.com/photos/event/c/8/e/2/highres_472311426.jpeg",
        id: "meetup-photo-1"
    },
    {
        src: "https://substackcdn.com/image/fetch/h_600,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fpbs.substack.com%2Fmedia%2FFSzbIv-VEAABDP6.jpg",
        id: "meetup-photo-2"
    },
    {
        src:"https://assets.telegraphindia.com/telegraph/2022/Nov/1668743799_untitled-design-2022-11-18t092905-972.jpg",
        id: "meetup-photo-3"
    },
    {
        src:"https://www.codemotion.com/magazine/wp-content/uploads/2020/04/35344608_1932760713412894_8299069717268660224_o-1024x683.jpg",
        id: "meetup-photo-4"
    }
];

export default meetUpList


Filepath: githubCode\client\src\utils\TestimonialData.js:

const testimonialList = [
    {
        img_src: "../Assets/himesh.jpg",
        text: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Corrupti sunt odio necessitatibus aliquam doloremque incidunt, quo id alias optio laborum? ",
        name: "ipsum dolor",
        email: "xyz@gmail.com"
    },
    {
        img_src: "../Assets/himesh.jpg",
        text: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Corrupti sunt odio necessitatibus aliquam doloremque incidunt, quo id alias optio laborum? ",
        name: "ipsum dolor",
        
        email: "xyz@gmail.com"
    },
    {
        img_src: "../Assets/himesh.jpg",
        text: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Corrupti sunt odio necessitatibus aliquam doloremque incidunt, quo id alias optio laborum? ",
        name: "ipsum dolor",
        email: "xyz@gmail.com"
    },
    {
        img_src: "../Assets/himesh.jpg",
        text: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Corrupti sunt odio necessitatibus aliquam doloremque incidunt, quo id alias optio laborum? ",
        name: "ipsum dolor",
        email: "xyz@gmail.com"
    },
    {
        img_src: "../Assets/himesh.jpg",
        text: "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Corrupti sunt odio necessitatibus aliquam doloremque incidunt, quo id alias optio laborum? ",
        name: "ipsum dolor",
        email: "xyz@gmail.com"
    },

]

export default testimonialList;


Filepath: githubCode\server\controllers\getdata.js:


const { faker } = require("@faker-js/faker");



exports.getdata = async (req, res) => {
  
    const { schema } = req.query;
  
    if (!schema) {
      return res.status(400).json({ error: 'Missing data schema parameter' });
    }
  
    try {
      const data = generateMockData(JSON.parse(schema));
      res.json(data);
    } catch (error) {
      res.status(400).json({ error: 'Invalid data schema' });
    }
};


function generateMockData(schema) {
    const data = {};

    for (const key in schema) {
        if (schema.hasOwnProperty(key)) {

            const dataType = schema[key];
            let value = {};

            switch (key) {
                case 'name':
                    value = faker.person.fullName();
                    break;
                case 'Person_desc':
                    value.bio = faker.person.bio();
                    value.gender = faker.person.gender();
                    value.Job = faker.person.jobTitle();
                    value.Job_type = faker.person.jobType();
                    break;
                case 'firstname':
                    value = faker.person.firstName();
                    break;
                case 'lastname':
                    value = faker.person.lastName();
                    break;
                case 'age':
                    value = faker.number.int(110);
                    break;
                case 'id':
                    value = faker.string.uuid();
                    break;

                case 'password':
                    value = faker.internet.password();
                    break;
                case 'name':
                    value = faker.person.fullName();
                    break;
                case 'email':
                    value = faker.internet.email();
                    break;
                case 'username':
                    value = faker.internet.userName();
                    break;
                case 'company':
                    value = faker.company.name();
                    break;
                case 'commerce':
                    value.product_name = faker.commerce.productName();
                    value.product_price = faker.commerce.price();
                    value.product_description = faker.commerce.productDescription();
                    value.product_material = faker.commerce.productMaterial();
                    break;
                case 'animal':
                    // var dataname = schema[key];
                    // console.log(dataname);
                    value = faker.animal.dog();

                    break;
                case 'airline':
                    value.airline = faker.airline.airline();
                    value.airplane = faker.airline.airplane();
                    value.aircraft = faker.airline.aircraftType();
                    value.airport = faker.airline.airport();
                    break;
                case 'location':
                    value.city = faker.location.city();
                    value.country = faker.location.country();
                    value.country_Code = faker.location.countryCode();
                    break;
                case 'vehicle':
                    value.vehicle = faker.vehicle.vehicle();
                    value.vehicle_model = faker.vehicle.model();
                    value.vehicle_manufacturer = faker.vehicle.manufacturer();
                    value.vehicle_fuel = faker.vehicle.fuel();
                    break;
                case 'music':
                    value.song_name = faker.music.songName();
                    value.genre = faker.internet.genre();

                    break;
                case 'web':
                    value.domain = faker.internet.domainName();
                    value.ip = faker.internet.ip();
                    break;
                case 'finance':
                    value.currency_name = faker.finance.currencyName();
                    value.currency_symbol = faker.finance.currencySymbol();
                    value.account_name = faker.finance.accountName();
                    value.account_number = faker.finance.accountNumber();
                    value.amount = faker.finance.amount();
                    break;
                case 'phone':
                    value.phone_number = faker.phone.number();
                    value.phone_imei = faker.phone.imei();
                    break;
                case 'lorem':
                    value.paragraph = faker.lorem.paragraph();
                    value.sentence = faker.lorem.sentence();
                    break;
                case 'date':
                    value.month = faker.date.month();
                    value.weekday = faker.date.weekday();
                    value.date = faker.date.recent();
                    break;



                default:
                    value = null;
            }

            data[key] = value;
        }
    }

    return data;
}

Filepath: githubCode\server\controllers\sendotp.js:

var nodemailer = require("nodemailer");
require("dotenv").config();
const otpGenerator = require("otp-generator");
const userModel = require("../db");
const { response } = require("express");
require("dotenv").config();

exports.send = async function (req, res) {
  var email = req.body.email;
  console.log(email);
  sendMail(req, res, { email });
};

function otp() {
  const otpgenerated = otpGenerator.generate(6, {
    upperCaseAlphabets: false,
    lowerCaseAlphabets: false,
    specialChars: false,
  });
  console.log(otpgenerated);
  return otpgenerated;
}

const sendMail = function (req, res, { email }) {
  var otpgenerated = otp();

  var emailuser = email;

  var transport = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    auth: {
      user: process.env.EMAIL_SENDER,
      pass: process.env.EMAIL_PASSWORD,
    },
    tls: {
      rejectUnauthorized: false,
    },
  });

  var mailOptions = {
    from: '"Ayush" <ayush4002gupta@gmail.com>',
    to: emailuser,
    subject: "OTP for verification",
    text: `Hey there, <p> This is your otp for verification : <b> ${otpgenerated} </b>`,
    html: `Hey there, <p> This is your otp for verification : <b> ${otpgenerated} </b>`,
  };
  transport.sendMail(mailOptions, (error, info) => {
    if (error) {
      return console.log(error);
    }
    // console.log(info);
    // console.log('Message sent: %s', info.messageId);

    userModel
      .findOne({ email: emailuser })
      .then((result) => {
        if (result === null) {
          const user = new userModel({
            email: emailuser,
            otpverified: "",
            otp: otpgenerated,
            key: "",
          });
          user.save().then(() => {
            res.status(200).json({ message: "email sent with otp" });
          });
        }
        else if (result.otpverified !== "1") {
          userModel
          .updateOne({ email: emailuser }, { $set: { otp : otpgenerated } })
          .then(() => res.send({"message":"new otp is sent"}))
          .catch((error) => console.log(error));
        }
      })
      .catch((error) => console.log(error));
  });


};



Filepath: githubCode\server\controllers\verifyotp.js:

const userModel = require("../db");
var nodemailer = require("nodemailer");

const deletentry = (emailuser) => {
  console.log("this is delete entry console");
  userModel
    .findOne({ email: emailuser })
    .then((result) => {
      if (result.otpverified !== "1") {
        userModel
          .deleteOne({ email: emailuser })
          .then(() => console.log("deleted entry"))
          .catch((error) => console.log(error));
      }
    })
    .catch((error) => console.log(error));
};

exports.verifyotp = async function (req, res) {
  try {
    var otpmain = req.body.otp;
    var emailuser = req.body.email;

    console.log(otpmain);

    userModel.findOne({ email: emailuser }).then((result) => {

      if(result==null){
        res.send({
          message: "otp expired",
        });
      }


      else if (result.otp == otpmain) {
        userModel
          .updateOne({ email: emailuser }, { $set: { otpverified: "1" } })
          .then(() => console.log("otp field empty"))
          .catch((error) => console.log(error));

        var key = result._id;
        var email = result.email;
        console.log(key);
        sendkey(req, res, { email }, { key });
      }
      else if (result == null) {
        res.send({
          message: "otp expired please try again",
        });
        deletentry(emailuser);
      }
      else if (result.otp !== otpmain) {
        res.send({
          message: "wrong otp",
        });
        setTimeout(() => {
          deletentry(emailuser);
        }, 300000);
      }
    });
  } catch (error) {}
};

exports.verify = async function (req, res) {
 
};

const sendkey = function (req, res, { email }, { key }) {
  var emailuser = email;
  var transport = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    auth: {
      user: process.env.EMAIL_SENDER,
      pass: process.env.EMAIL_PASSWORD,
    },
    tls: {
      rejectUnauthorized: false,
    },
  });

  var mailOptions = {
    from: '"Ayush" <ayush4002gupta@gmail.com>',
    to: emailuser,
    subject: "Your verification key",
    text: `Hey there, This is your otp for verification : ${key}`,
    html: `<b>Hey there! </b>This is your verification key for the api: ${key}`,
  };
  transport.sendMail(mailOptions, (error, info) => {
    if (error) {
      return console.log(error);
    }
    // console.log(info);
    // console.log("Message sent: %s", info.messageId);

    userModel
      .updateOne({ email: emailuser }, { $set: { key: key } })
      .then(() =>
        res.send({
          message: "Key sent to your email",
        })
      )
      .catch((error) => console.log(error));
  });
};


Filepath: githubCode\server\middleware\emailcheck.js:

const userModel = require("../db");

exports.emailcheck = function (req, res, next) {
  try {
    console.log("this is mail check")
    var emailuser = req.body.email;
    userModel
      .findOne({ email: emailuser })
      .then((data) => {
        console.log(data);
        if (data !== null ) {
          if(data.otpverified === ""){
            next()
          }
          else{
            return res.status(401).json({ message: "user exists!" });
          }
        }else{
            next();
        }
      })
      .catch((error) => console.log(error));
  } catch (err) {
    console.log(err);
  }
};

Filepath: githubCode\server\middleware\keyverification.js:

const userModel = require("../db");

exports.keyverification = function (req, res, next) {
  try {
    const reqkey = req.params.key;
    console.log(reqkey);

    userModel
      .findOne({ key: reqkey })
      .then((data) => {
        if (data) {
          console.log("verification done");

          next();
        }
        // if(data===null){
        //     console.log("no api key found");
        //     res.json({
        //         message:"no api key found"
        //     })
        // }
        if (!data && data == null) {
          console.log("incorrect api key");
          res.json({
            message: "incorrect api key",
          });
        }
      })
      .catch((error) => console.log(error));
  } catch (err) {
    console.log(err);
  }
};


Filepath: githubCode\server\routes\routes.js:

const express = require("express");
const { getdata } = require("../controllers/getdata");
const { keyverification } = require("../middleware/keyverification");
const { send } = require("../controllers/sendotp");
const { verify, verifyotp } = require("../controllers/verifyotp");
const { emailcheck } = require("../middleware/emailcheck");

const router = express.Router();

router.route("/sendotp").post(emailcheck,send);
router.route("/verify").post(verifyotp);
router.route("/get-data/:key").get(keyverification, getdata);

module.exports = router;


Filepath: Code\app.py:

print("Hello world!")

